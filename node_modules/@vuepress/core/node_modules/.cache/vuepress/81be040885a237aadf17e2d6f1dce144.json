{"remainingRequest":"D:\\bobyuan\\scm\\gitlab\\20200304_bobyuan_vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\bobyuan\\scm\\gitlab\\20200304_bobyuan_vuepress\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\bobyuan\\scm\\gitlab\\20200304_bobyuan_vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\bobyuan\\scm\\gitlab\\20200304_bobyuan_vuepress\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!D:\\bobyuan\\scm\\gitlab\\20200304_bobyuan_vuepress\\docs\\views\\technical\\2020\\20200320_notepadpp_with_markdown_support.md?vue&type=template&id=74d913ea&","dependencies":[{"path":"D:\\bobyuan\\scm\\gitlab\\20200304_bobyuan_vuepress\\docs\\views\\technical\\2020\\20200320_notepadpp_with_markdown_support.md","mtime":1584753108005},{"path":"D:\\bobyuan\\scm\\gitlab\\20200304_bobyuan_vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1592214682975},{"path":"D:\\bobyuan\\scm\\gitlab\\20200304_bobyuan_vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1592280850332},{"path":"D:\\bobyuan\\scm\\gitlab\\20200304_bobyuan_vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1592214682975},{"path":"D:\\bobyuan\\scm\\gitlab\\20200304_bobyuan_vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":1592280850332},{"path":"D:\\bobyuan\\scm\\gitlab\\20200304_bobyuan_vuepress\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1592280257256}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}